syntax = "proto3";

option java_multiple_files = true;
option java_package = "mpc.project";

// this service is for the worker server
// add more rpc methods and request/response types if needed
service WorkerService {
  /* Clust formation utilities */
  rpc registerManager(StdRequest) returns(StdResponse) {}
  rpc formCluster(StdRequest) returns (StdResponse) {}
  rpc formNetwork(StdRequest) returns (StdResponse) {}
  rpc shutDownWorker(StdRequest) returns (StdResponse) {}

  /* Generate Modulus utilities */
  rpc hostModulusGeneration(StdRequest) returns (StdResponse) {}
  rpc generateModulusPiece(StdRequest) returns (StdResponse) {}
  rpc exchangePrimesPQH (ExchangePrimespqhRequest) returns (StdResponse) {}
  rpc exchangeNPiece(StdRequest) returns (StdResponse) {}

  /* Primality test utilities */
  rpc hostPrimalityTest(StdRequest) returns (StdResponse) {}
  rpc primalityTest(StdRequest) returns (PrimalityTestResponse) {}

  /* Private key generation utilities */
  rpc generatePrivateKey(StdRequest) returns (StdResponse) {}
  rpc exchangeGamma(StdRequest) returns (StdResponse) {}
  rpc exchangeGammaSum(StdRequest) returns (StdResponse) {}

  rpc decrypt(StdRequest) returns (StdResponse) {}
}

// this service is for the manager server
// add more rpc methods and request/response types if needed
service ManagerService{
  rpc greeting(StdRequest) returns (StdResponse) {}
}

message StdRequest {
  int32 id = 1;       // for specifying the sender's id
  // in formCluster, it marks the receiving worker's id
  bytes contents = 2; // for containing the information, usually a BigNumber
  int64 workflowID = 3; // for concurrent data receiving
}

message ExchangePrimespqhRequest {
  int32 id = 1;
  bytes p = 2;
  bytes q = 3;
  bytes h = 4;
  int64 workflowID = 5;
}

message StdResponse {
  int32 id = 1;      // for specifying the responser's id
  bytes contents = 2;
}

message PrimalityTestResponse {
  int32 id = 1;
  bytes v = 2;
}